//------------------------------------------------------------------------------
// Regular term
//------------------------------------------------------------------------------
#ifdef __AVX__          

  #define L1_TERM(regular_term)                              \
      int bias = ((((*w)[start_key] > 0) << 3) |             \
                 (((*w)[start_key + 1] > 0) << 2) |          \
                 (((*w)[start_key + 2] > 0) << 1) |          \
                 ((*w)[start_key + 3] > 0));                 \
      regular_term  = _MMX_LOAD_PS(L1_term + 4 * bias);
#else 
  #define L1_TERM(regular_term)                              \
      int bias = ((((*w)[start_key] > 0) << 7) |             \
                 (((*w)[start_key + 1] > 0) << 6) |          \
                 (((*w)[start_key + 2] > 0) << 5) |          \
                 (((*w)[start_key + 3] > 0) << 4) |          \
                 (((*w)[start_key + 4] > 0) << 3) |          \
                 (((*w)[start_key + 5] > 0) << 2) |          \
                 (((*w)[start_key + 6] > 0) << 1) |          \
                 ((*w)[start_key + 3] > 0);                  \
      regular_term  = _MMX_LOAD_PS(L1_term + 8 * bias); 
#endif

#define GetRegularTerm(regular_term,regu_type_)              \
  switch(regu_type_) {                                       \
    case L2: {                                               \
      regular_term = _MMX_LOAD_PS(&(*w)[start_key]);         \
      break;                                                 \
    }                                                        \
    case L1: {                                               \
      L1_TERM(regular_term);                                               \
      break;                                                 \
    }                                                        \
    case NONE: {                                             \
      regular_term  = _MMX_SETZERO_PS();                     \
      break;                                                 \
    }                                                        \
    default:                                                 \
      LOG(FATAL) << "Error: Unknow regularizer.";            \
    }

//------------------------------------------------------------------------------
// Regular term
//------------------------------------------------------------------------------

#ifdef __AVX__

float L1_term[64] = {-1.0, -1.0, -1.0, -1.0,
                     -1.0, -1.0, -1.0,1.0,
                     -1.0, -1.0,1.0, -1.0,
                     -1.0, -1.0,1.0,1.0,
                     -1.0,1.0, -1.0, -1.0,
                     -1.0,1.0, -1.0,1.0,
                     -1.0,1.0,1.0, -1.0,
                     -1.0,1.0,1.0,1.0,
                     1.0, -1.0, -1.0, -1.0,
                     1.0, -1.0, -1.0,1.0,
                     1.0, -1.0,1.0, -1.0,
                     1.0, -1.0,1.0,1.0,
                     1.0,1.0, -1.0, -1.0,
                     1.0,1.0, -1.0,1.0,
                     1.0,1.0,1.0, -1.0,
                     1.0,1.0,1.0,1.0};

#else

float L1_term[1024] = {-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,
                       -1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,1.0,
                       -1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,
                       -1.0,-1.0,1.0,1.0,1.0,1.0,1.0,-1.0,
                       -1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,
                       -1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,
                       -1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,
                       -1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,
                       -1.0,1.0,-1.0,1.0,1.0,1.0,1.0,1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,
                       -1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,
                       -1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,
                       -1.0,1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,
                       -1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,
                       -1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,
                       -1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,
                       -1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,
                       -1.0,1.0,1.0,1.0,-1.0,1.0,1.0,1.0,
                       -1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,
                       -1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,
                       -1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,
                       -1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,
                       -1.0,1.0,1.0,1.0,1.0,1.0,-1.0,1.0,
                       -1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,
                       -1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,
                       1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,
                       1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,
                       1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,
                       1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,
                       1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,
                       1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,
                       1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,
                       1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,1.0,
                       1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,
                       1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,
                       1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,
                       1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,1.0,
                       1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,
                       1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,
                       1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,1.0,
                       1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,
                       1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,1.0,
                       1.0,-1.0,1.0,1.0,1.0,1.0,1.0,-1.0,
                       1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,
                       1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,1.0,
                       1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,1.0,
                       1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,-1.0,
                       1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,
                       1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,1.0,
                       1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,1.0,
                       1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,-1.0,
                       1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,1.0,
                       1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,1.0,
                       1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,-1.0,
                       1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,1.0,
                       1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,-1.0,
                       1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,1.0,
                       1.0,1.0,-1.0,1.0,1.0,1.0,1.0,-1.0,
                       1.0,1.0,-1.0,1.0,1.0,1.0,1.0,1.0,
                       1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,1.0,
                       1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,1.0,
                       1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,-1.0,
                       1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,1.0,
                       1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,1.0,
                       1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,-1.0,
                       1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,1.0,
                       1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,-1.0,
                       1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,1.0,
                       1.0,1.0,1.0,-1.0,1.0,1.0,1.0,-1.0,
                       1.0,1.0,1.0,-1.0,1.0,1.0,1.0,1.0,
                       1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,1.0,
                       1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,-1.0,
                       1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,1.0,
                       1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,-1.0,
                       1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,1.0,
                       1.0,1.0,1.0,1.0,-1.0,1.0,1.0,-1.0,
                       1.0,1.0,1.0,1.0,-1.0,1.0,1.0,1.0,
                       1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,-1.0,
                       1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,1.0,
                       1.0,1.0,1.0,1.0,1.0,-1.0,1.0,-1.0,
                       1.0,1.0,1.0,1.0,1.0,-1.0,1.0,1.0,
                       1.0,1.0,1.0,1.0,1.0,1.0,-1.0,-1.0,
                       1.0,1.0,1.0,1.0,1.0,1.0,-1.0,1.0,
                       1.0,1.0,1.0,1.0,1.0,1.0,1.0,-1.0,
                       1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
                       
#endif